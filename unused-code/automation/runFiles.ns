import {calculateThreads} from "/utils/calculations.ns";
import {loadNodesWithAdminAccess} from "/utils/nodeLoader.ns";
import {parseNode} from "/utils/nodeLoader.ns";

var file = "/scripts/t1.script";
var file2 = "/automation/distributedAttack.ns";
var homeMod = 1;
var awayMod = 1;

//working runner
export async function fileRunner(ns) {
    var fileSize = await ns.getScriptRam(file, "home");
    var hackedNodes = loadNodesWithAdminAccess(ns);
    var total = 0;
    for(var node of hackedNodes){
        if(node.maxRam !== 0 && node.ramUsed === 0){
            var threads = threadHelper(ns, fileSize, node, awayMod);
            ns.exec(file, node.hostname, threads, threads);
            total++;
        }
    }
    ns.tprint(
        ns.vsprintf("Finished starting scripts on %d nodes (Total Threads: %d)", [total, (total*threads)])
    );
    var startOnHome = true;
    if(startOnHome){
        var homeServer = ns.getServer("home");
        var threads = threadHelper(ns, fileSize, homeServer, homeMod);
        // ns.exec(file, "home", threads, threads);
        // ns.exec("/scripts/tut-buy8gb.script", "home", 1);
        ns.exec("hackNode.script", "home", 1);
        ns.exec("/scripts/grow.script", "home", threads, threads);
        
        ns.tprint(
            ns.vsprintf("Finished starting scripts on home, %d GB usage per thread (Threads: %d, Total Usage: %d GB)", [fileSize ,threads,fileSize*threads])
        );
        
        // let serverSize  = await ns.getScriptRam("/scripts/tut-buy8gb.script", homeServer.hostname);
        // let hacknetSize = await ns.getScriptRam("hackNode.script", homeServer.hostname);
        // await Promise.all([serverSize, hacknetSize]).then((serverSize, hacknetSize) => {
        //     var size1 = serverSize;
        //     var size2 = hacknetSize;
        //     if(size1 && size2){
        //         ns.tprint(
        //             ns.vsprintf("Finished starting server purchase scripts, %d GB usage on 1 thread", [serverSize])
        //         );
        //         ns.tprint(
        //             ns.vsprintf("Finished starting hacknet scripts, %d GB usage on 1 thread", [hacknetSize])
        //         );
        //         ns.tprint(
        //             ns.vsprintf("Home still has %s GB available", [ns.nFormat(homeServer.maxRam - homeServer.ramUsed, "0,000.##")])
        //         );
        //     }
        // });
        
    }
}

export async function runAttack(ns){
    var fileSize = ns.getScriptRam(file2, "home");
    var hackedNodes = loadNodesWithAdminAccess(ns);
    var homeServer = parseNode(ns.getServer("home"));
    hackedNodes.push(homeServer);

    //TODO actual launching
}

export async function hRunner(ns) {
    var hackedNodes = loadNodesWithAdminAccess(ns);
    for(var node of hackedNodes){
        
    }
}

function threadHelper(ns, fileSize, node, mod){
    var threads = calculateThreads(ns, fileSize, node, mod);
    return threads;
}