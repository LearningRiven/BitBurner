function gainFromLevelUpgrade(X, Y, Z) {
    return (1*1.6) * Math.pow(1.035,Y-1) * ((Z+5)/6);
}
function gainFromRamUpgrade(X, Y, Z) {
    return (X*1.6) * (Math.pow(1.035,(2*Y)-1) - Math.pow(1.035,Y-1)) * ((Z+5)/6);
}
function gainFromCoreUpgrade(X, Y, Z) {
    return (X*1.6) * Math.pow(1.035,Y-1) * (1/6);
}

function weakestIndex(ns){
	var w = 0;
	for(var k = 0; k < ns.hacknet.numNodes(); k++){
		var pStats = ns.hacknet.getNodeStats(k);
		var cStats = ns.hacknet.getNodeStats(w);
		if(pStats.production > cStats.production){
			w = k;
		}
	}
	return w;
}

async function waitTillCash(ns, target){
    if(ns.getServerMoneyAvailable("home") < target)
        ns.print(`Waiting for cash to reach ${target}`);
    while(ns.getServerMoneyAvailable("home") < target)
        await ns.sleep(5000);
}

export async function main(ns) {
	//Handle the base case of starting the script in the beginning of the game
	if(ns.getServerMoneyAvailable("home") >= ns.hacknet.getPurchaseNodeCost() && ns.hacknet.numNodes() === 0){
		ns.hacknet.purchaseNode();
	}

	//Handle everything else continuously
	while(true){
		//Find the weakest node
		var weakestIndex = weakestIndex(ns);
		var weakestNode = ns.hacknet.getNodeStats(weakestIndex);

		//Load relevant node stats
		let X = weakestNode.level;
        let Y = weakestNode.ram;
        let Z = weakestNode.cores;
		
		var augMult = ns.getHacknetMultipliers().production * ns.getBitNodeMultipliers().HacknetNodeMoney;
		
		var choice = "X";

		//Get gain from upgrading level
        cost = ns.hacknet.getLevelUpgradeCost(weakestIndex, 1);
        gain = gainMul * gainFromLevelUpgrade(X, Y, Z);
		//Get gain from upgrading ram
        cost = ns.hacknet.getRamUpgradeCost(weakestIndex, 1);
        gain = gainMul * gainFromRamUpgrade(X, Y, Z);
		//Get gain from upgrading core
		cost = ns.hacknet.getCoreUpgradeCost(weakestIndex, 1);
        gain = gainMul * gainFromCoreUpgrade(X, Y, Z);
		//Get gain from buying a new node
        cost = ns.hacknet.getPurchaseNodeCost();
        gain = weakestNode.production;

	}
}